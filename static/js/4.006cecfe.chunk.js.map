{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.js","components/Dialogs/Message/Message.js","components/Dialogs/Dialogs.js","hoc/withAuthRedirect.js","components/Dialogs/Dialogs-container.js"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","dialogs","text","maxlength10","maxLengthCreator","MessageReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","placeholder","component","Textarea","validate","required","Dialogs","state","dialogsPage","dialogsElements","map","item","messageElement","messages","m","message","isAuth","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","auth","withAuthRedirect","Component","RedirectComponent","this","React","connect","compose","dispatch","sendMessageCreator"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,IAAM,qBAAqB,KAAO,sBAAsB,WAAa,4BAA4B,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,6FCWpQC,EARI,SAAAC,GACf,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OAAO,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACX,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCAXC,EAJC,SAAAT,GACZ,OAAO,qBAAKG,UAAWC,IAAEM,QAAlB,SAA4BV,EAAMW,Q,0CCgCvCC,EAAcC,YAAiB,IAkB/BC,EAAmBC,YAAU,CAAEC,KAAM,yBAAlBD,EAjBF,SAACf,GAAW,IACvBiB,EAAiBjB,EAAjBiB,aACR,OACI,uBAAMC,SAAUD,EAAhB,UACI,cAACE,EAAA,EAAD,CACIC,YAAa,qBACbZ,KAAM,iBACNa,UAAWC,IACXC,SAAU,CAACC,IAAUZ,KAEzB,8BACI,kDAQDa,EA9CC,SAAAzB,GACZ,IAAI0B,EAAQ1B,EAAM2B,YACdC,EAAkBF,EAAMhB,QAAQmB,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAYtB,KAAMsB,EAAKtB,KACnEN,GAAI4B,EAAK5B,IAAS4B,EAAK5B,OACvB6B,EAAiBL,EAAMM,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAStB,KAAMsB,EAAEC,SAAcD,EAAE/B,OAM9E,OAAqB,IAAjBF,EAAMmC,OAAyB,cAAC,IAAD,CAAU5B,GAAG,WAG5C,sBAAKJ,UAAWC,IAAEM,QAAlB,UACI,qBAAKP,UAAWC,IAAEgC,aAAlB,SACKR,IAEL,sBAAKzB,UAAWC,IAAE4B,SAAlB,UACI,8BAAMD,IACN,8BACI,cAACjB,EAAD,CAAkBI,SAdrB,SAAAmB,GACTrC,EAAMsC,YAAYD,EAAOE,4B,wDCZ7BC,EAA6B,SAACd,GAAD,MAAY,CACzCS,OAAQT,EAAMe,KAAKN,SAiBRO,EAdQ,SAACC,GAAe,IAE7BC,EAF4B,uKAI1B,OAA0B,IAAtBC,KAAK7C,MAAMmC,OAAyB,cAAC,IAAD,CAAU5B,GAAG,WAE9C,cAACoC,EAAD,eAAeE,KAAK7C,YAND,GAEF8C,IAAMH,WAQtC,OADqCI,YAAQP,EAARO,CAAoCH,I,OCC9DI,sBAAQD,aAbD,SAACrB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAGF,SAACsB,GACtB,MAAO,CACHX,YAAa,SAACC,GACVU,EAASC,YAAmBX,SAK4BG,EAArDM,CAAwEvB","file":"static/js/4.006cecfe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Dialogs_nav__1UcZg\",\"item\":\"Dialogs_item__29pPd\",\"activeLink\":\"Dialogs_activeLink__34w6e\",\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport s from \"./../Dialogs.module.css\";\n\nconst DialogItem = props => {\n    let path = \"/dialogs/\" + props.id;\n    return <div className={s.dialog + \" \" + s.active}>\n<NavLink to={path}>{props.name}</NavLink>\n    </div>;\n};\n\n\nexport default DialogItem;\n","import React from \"react\";\nimport s from \"./../Dialogs.module.css\";\n\nconst Message = props => {\n    return <div className={s.dialogs}>{props.text}</div>;\n};\n\nexport default Message;\n","import React from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport { Redirect } from 'react-router-dom';\nimport { Field, reduxForm } from 'redux-form';\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\nimport { required, maxLengthCreator } from \"../../utils/validators/validators\";\n\n\nconst Dialogs = props => {\n    let state = props.dialogsPage;\n    let dialogsElements = state.dialogs.map(item => <DialogItem name={item.name} \n        id={item.id} key={item.id} />);\n    let messageElement = state.messages.map(m => <Message text={m.message} key={m.id} />);\n\n    let submit = values => {\n        props.sendMessage(values.newMessageBody)\n    }\n\n    if (props.isAuth === false) return <Redirect to='/login' />;\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div>{messageElement}</div>\n                <div>\n                    <MessageReduxForm onSubmit={submit} />\n                </div>\n            </div>\n        </div>\n    );\n};\nconst maxlength10 = maxLengthCreator(50);\nconst AddMessageForm = (props) => {\n    const { handleSubmit } = props;\n    return (\n        <form onSubmit={handleSubmit}>\n            <Field\n                placeholder={\"enter your message\"}\n                name={'newMessageBody'}\n                component={Textarea} \n                validate={[required, maxlength10]}\n                />\n            <div>\n                <button>send</button>\n            </div>\n        </form>\n    )\n};\n\nconst MessageReduxForm = reduxForm({ form: 'dialogsAddMessageForm' })(AddMessageForm);\n\nexport default Dialogs;\n","import React from 'react';\nimport {Redirect } from 'react-router-dom';\nimport { connect } from \"react-redux\";\n\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n});\n\nlet withAuthRedirect = (Component) => {\n\n    class RedirectComponent extends React.Component {\n        render() {\n            if (this.props.isAuth === false) return <Redirect to='/login' />;\n\n            return <Component {...this.props} />\n        }\n    }\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n    return ConnectedAuthRedirectComponent;\n}\n\n\nexport default withAuthRedirect;\n","import Dialogs from \"./Dialogs\";\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\nimport { connect } from \"react-redux\";\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\nimport {compose} from 'redux';\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n};\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage: (newMessageBody) => {\n            dispatch(sendMessageCreator(newMessageBody));\n        },\n    }\n}\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps),withAuthRedirect )(Dialogs);\n"],"sourceRoot":""}